Go 并发编程可视化

2017.7.27

黄庆兵 - 网易

bingohuang.com

http://talks.bingohuang.com

https://github.com/163yun

* 并发
是一种构造程序的方式，事关设计及编程
.video http://bingohuang.nos-eastchina1.126.net/Concurrencyisnotparallelism-RobPike.mp4 video/mp4 400 _
  1. 并发很强大
  2. 并发帮助实现并行，使并行(扩展等)变得容易
  3. 并发不是并行


* Concurrency VS Parallelism
并发:

  - 将相互独立的执行过程综合到一起的编程技术。
  - 并发即可以运行在单核，也可以运行在多核上

并行：

  - 同时执行(通常是相关的)计算任务的编程技术。
  - 并行需要运行在多核上

总结：

  - 两者不同，但相关，一个重点是组合，一个重点是执行。
  - 并发提供了一种方式让我们能够设计一种方案将问题(非必须的)并行的解决。
#视频链接 rob pike
#最后再来用可视化的方式解答什么是并行，什么是并发？
#中文容易混淆，但是英文单词就区分的非常明显

* 可视化并发(CONCURRENCY) VS 并行(PARALLELISM)
- 并行(PARALLELISM)
.link /2017/go-concurrency-visualize/parallelism.html *这是并行*
- 并发(CONCURRENCY)
.link /2017/go-concurrency-visualize/pingpong36.html *这是并发*

* 为什么要关注并发？当今是多核的时代，并发的世界

* 软件不应该是这样子
.image go-concurrency-visualize/images/cpu.gif _ 840

* 而是这个样子
.image go-concurrency-visualize/images/cores.png _ 840

* 并发实现并不容易，但 Go 对并发有很好的支持

* Go 语言中的并发
- goroutine - 并发执行
- channel - 同步和消息传输
- select - 多路并发控制
: 谢大的每日新闻中，经常提及

* GOROUTINE
- 一种轻量级的"线程"
- 只需要在函数前缀加上 `go`
- 类似于 UNIX 中的 `&`
  go foo()

* CHANNEL
- 允许在 goroutines 之间传递消息
- 类似于 UNIX 中的管道
  // send 42 to channel
  ch <- 42
  ...
  // read 42 from channel
  val := <-ch

* SELECT{}
- 多 channles I/O
  select {
      case val := <-ch:
          fmt.Println("Read from channel:", val)
      case ch2 <- 42:
          fmt.Println("Send 42 to channel 2")
  }

* 感概： Go 让并发编程变的简单了

* 但是问题来了
- 我们怎样去解说 Go 的并发？
- 我们怎样构建 Go 的并发过程？
- 最终，我们怎样更好的实践 Go 并发编程？

* 祭出法宝 - GOTRACE
一种将 Go 并发过程可视化的[[https://github.com/divan/gotrace][开源]]工具

出自 [[https://github.com/divan][divan]] 大神，主要包含两个程序：

- gotrace(go)：分析 go tool trace 的执行结果
- gothree(js): 基于 Three.js 和 WebGL 生成 3D 图像
: 该工具非常强大
: 具体的用法，可以看工程，后面也会有简单介绍

* 说了这么多，耳听为虚，眼见为实
: 话不多说，让我们来看多看几个实例

* 1. HELLO, WORLD!
.code go-concurrency-visualize/helloworld.go /START/,/STOP/
.link /2017/go-concurrency-visualize/helloworld.html *Go并发可视化*

* 2. 计时器
.code go-concurrency-visualize/timer.go /START/,/STOP/
.link /2017/go-concurrency-visualize/timer.html *Go并发可视化*

* 3. 乒乓 - 2 个玩家
.code go-concurrency-visualize/pingpong2.go /START/,/STOP/
.link /2017/go-concurrency-visualize/pingpong2.html *Go并发可视化*
# 是否附带一张搞笑的图

* 3. 乒乓 - 3 个玩家
.code go-concurrency-visualize/pingpong3.go /START/,/STOP/
.link /2017/go-concurrency-visualize/pingpong3.html *Go并发可视化*

* 3. 乒乓 - 36 个玩家
.code go-concurrency-visualize/pingpong36.go /START/,/STOP/
.link /2017/go-concurrency-visualize/pingpong36.html *Go并发可视化*

* 4. 素数筛
.image go-concurrency-visualize/images/Sieve_of_Eratosthenes_animation.gif

素数是一个自然数，它具有两个截然不同的自然数除数：1和它本身。 要找到小于或等于给定整数n的素数，我们可以使用[[https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes][Eratosthenes' sieve(埃拉托斯特尼)算法]]。

  算法描述：先用最小的素数2去筛，把2的倍数剔除掉；下一个未筛除的数就是素数(这里是3)。
  再用这个素数3去筛，筛除掉3的倍数... 这样不断重复下去，直到筛完为止。

* 4. 素数筛
.code go-concurrency-visualize/primesieve.go /START/,/STOP/

* 4. 素数筛
.link /2017/go-concurrency-visualize/primesieve.html *Go并发可视化*

* 5. GOROUTINES 泄露
.code go-concurrency-visualize/leak.go /START/,/STOP/
.link /2017/go-concurrency-visualize/leak.html *Go并发可视化*

* GOTRACE 用法简介
- go get -v -u github.com/divan/gotrace
- 默认使用 go1.6，推荐切换到 go18 分支，支持 go1.8.1，再重新构建 go install
  Usage: gotrace [trace.out] or [main.go]
         (if you pass .go file to gotrace, it will modify code on the fly,
         adding tracing, run it and collect the trace automagically)
- 直接运行 go 文件的效果并不好，推荐生成 trace，可以用以下脚本：
  docker run --rm -it \
    -e GOOS=darwin \
    -v $(pwd):/src hub.c.163.com/bingohuang/gotrace:go1.8.1 \
        go build -o /src/binary /src/main.go
  ./binary 2> ./trace.out
  gotrace ./trace.out
- 自动打开浏览器，可调整视角、缩放、旋转以及线条加粗等
: 回过头来，我们再介绍一下 divan 大神的这款工具

* 场景
- 学习 Go 的并发模式
- 可视化 Go 的并发过程
- 非常酷！
