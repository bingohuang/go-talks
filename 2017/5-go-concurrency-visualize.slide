可视化学习 Go 并发编程

2017.7.27

黄庆兵 - 网易

bingohuang.com

http://talks.bingohuang.com

https://github.com/163yun

* 大纲
- 去年 meetup 分享，提到说，Go 会成为 “21世纪的 C 语言”，面向多核时代
- 几张图，讲讲现在 CPU 的趋势
- 在座的都是 Go 方面的专家
- 让大家以一种新的视角来了解 Go 并发模型和编程

* 什么是并发？
- a way to structure the program
- 一种构造程序的方式
- in a decomposable way
- 以一种可分解的方式
- 专业定义：

* CONCURRENCY IS NOT PARALLELISM - 并发不是并行 - Rob Pike
- concurrency is a design technique
- 并发是一种设计技术
- parallelism is an optimization technique
- 并行是一种优化技术
- Parallelism is simply running things in parallel.
- Concurrent program can run either on single core or multiple cores.
- 视频链接 rob pike
- 最后再来用可视化的方式解答什么是并行，什么是并发？
- 中文容易混淆，但是英文单词就区分的非常明显

* 并发(CONCURRENCY) VS 并行(PARALLELISM)
- 并行(PARALLELISM)
.link /2017/go-concurrency-visualize/parallelism.html *这是并行*
- 并发(CONCURRENCY)
.link /2017/go-concurrency-visualize/pingpong36.html *这是并发*

* 当今是并发的世界，多核的时代

* 软件不应该是这样子
图-TODO

* 而是这样子
图-TODO

* 并发本身不容易，但 Go 让并发变的有趣


* Go 语言中的并发
- goroutine
- channel
- select{}
: 谢大的每日新闻中，经常提及

* GOROUTINE
- is a lightweight 'process'
- 一个轻量级的线程？
- just prefix func with 'go'
- 只需要在函数前缀加上 `go`
- similar to '&' in UNIX
- 类似于 UNIX 中的 `&`
  go foo()

* CHANNEL
- allows passing messages between goroutines
- 允许在 goroutines 之间传递消息
- similar to pipe in UNIX
- 类似于 UNIX 中的管道
  // send 42 to channel
  ch <- 42
  ...
  // read 42 from channel
  val := <-ch

* SELECT{}
- multiplexing channels I/O
- 多 channles I/O
  select {
      case val := <-ch:
          fmt.Println("Read from channel:", val)
      case ch2 <- 42:
          fmt.Println("Send 42 to channel 2")
  }

* 总结一下
- Run new logical 'thread' - 3 characters
- 运行一个新的逻辑线程 - 1 个关键字
- Create pool of goroutines - 3 lines of code
- 创建一个 goroutine 池 - 3 行代码
- Safety - automatically
- 安全 - 自动的

* 感概：并发编程好像从来没有这么容易

* 但是问题来了
- 我们怎样去学习 Go 并发？
- 我们怎样思考 Go 的并发过程？
- 最终，我们怎样更好的实践 Go 并发编程？

* 祭出法宝 - GOTRACE
- Tool for visualizing Go concurrency using WebGL:
- 一种将 Go 并发过程可视化的开源工具，基于 WebGL
: 该工具非常强大
: 具体的用法，可以看工程，后面也会有简单介绍

* 耳听为虚，眼见为实
: 话不多说，让我们来看多看几个实例
# 可运行，可视化

* 1. HELLO, WORLD!
.code go-concurrency-visualize/helloworld.go /START/,/STOP/
.link /2017/go-concurrency-visualize/helloworld.html *Go并发可视化*

* 2. TIMER
.code go-concurrency-visualize/timer.go /START/,/STOP/
.link /2017/go-concurrency-visualize/timer.html *Go并发可视化*

* 3. PING-PONG - 2 Players
.code go-concurrency-visualize/pingpong2.go /START/,/STOP/
.link /2017/go-concurrency-visualize/pingpong2.html *Go并发可视化*
# 是否附带一张搞笑的图

* 4. PING-PONG - 3 Players
.code go-concurrency-visualize/pingpong3.go /START/,/STOP/
.link /2017/go-concurrency-visualize/pingpong3.html *Go并发可视化*

* 4. PING-PONG - 36 Players
.code go-concurrency-visualize/pingpong36.go /START/,/STOP/
.link /2017/go-concurrency-visualize/pingpong36.html *Go并发可视化*

* 5. 素数筛
.image go-concurrency-visualize/Sieve_of_Eratosthenes_animation.gif

素数是一个自然数，它具有两个截然不同的自然数除数：1和它本身。 要找到小于或等于给定整数n的素数，我们可以使用[[https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes][Eratosthenes' sieve(埃拉托斯特尼)算法]]。

  算法描述：先用最小的素数2去筛，把2的倍数剔除掉；下一个未筛除的数就是素数(这里是3)。
  再用这个素数3去筛，筛除掉3的倍数... 这样不断重复下去，直到筛完为止。

* 5. 素数筛
.code go-concurrency-visualize/primesieve.go /START/,/STOP/

* 5. 素数筛
.link /2017/go-concurrency-visualize/primesieve.html *Go并发可视化*

* MESSAGING PATTERNS - 这个先不讲
* FAN-IN
* SERVERS
* WORKERS / FAN-OUT / SUBWORKERS
* SERVER+WORKER

* GOMAXPROCS - 这个可以考虑下
- go doc runtime GOMAXPROCS
* GOMAXPROCS = 1
.link /2017/go-concurrency-visualize/primesieve.html *Go并发可视化*

* GOMAXPROCS = 24
.link /2017/go-concurrency-visualize/primesieve.html *Go并发可视化*

* GOROUTINES LEAK

* GOTRACE
- GO CONCURRENCY TRACER
- It's open-source
- github.com/divan/gotrace
- Uses go execution tracer (go tool trace)
- Requires patched Go (or pre-made docker images) - 最新版好像可以去掉
- (Kind of) language agnostic
- 简单介绍这些是怎么做出来的

* GOTRACE - 早期
- GO CONCURRENCY TRACER
- Uses go execution tracer (go tool trace)
- Rewrites your code and runs it
- Collect the trace
- Analyze and correlate events
- Start web-server serving WebGL visualization
- Requires patched Go (or pre-made docker images)

: 回过头来，我们再介绍一下 divan 大神的这款工具
