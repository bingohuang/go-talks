云原生时代下的12-factor应用与实践

黄庆兵

网易云 • 基础服务

2016.2.16

http://talks.bingohuang.com

* 自我介绍
- TODO


* 目录
- 云原生
- 12-factor
- 应用与实践

* 云原生
- 参考之前slide中的内容
- 简要介绍下云原生的概念

* 12-factor
- 简要介绍下 12-factor
- 列一个整体的图

* 应用与实践

* 0. 背景
- 越来越多的应用部署在云上
- 准备做一个 Node.js 的应用程序
- 暴露一系列的 CRUD 的 HTTP Rest API
- 实践 12-factor，升级应用
- 这个过程中，会用到 Docker 相关工具，非常适合 12-factor 理念
- 每个原则的意义，以及如何应用于我们的应用中
- 其实并没有我们想象的那么复杂

* 00. 准备
- 环境安装
  - 安装 Node 和 Sails
# 将这个过程制作到katacoda中 - 有时间的话
- 初始化一个项目

* I. 基准代码
一份基准代码，多份部署
- Git + Github

* II. 依赖
显式声明依赖关系
- package.json

* III. 配置
在环境中存储配置
- config

* IV. 后端服务
把后端服务当作附加资源
- Database, Message Queue, Logs, API, ...

* V. 构建，发布，运行
严格分离构建和运行
- Dockerfile
- docker-compose

* VI. 进程 - TODO
以一个或多个无状态进程运行应用
- session

* Yes！完成一半啦

* VII. 端口绑定
通过端口绑定提供服务
- ports

* VIII. 并发 - TODO
通过进程模型进行扩展
- web server\worker\cron
- 易扩展

* IX. 易处理 - TODO
快速启动和优雅终止可最大化健壮性
- kafka

* X. 开发环境与线上环境等价
尽可能的保持开发，预发布，线上环境相同
- docker-compose

* XI. 日志
把日志当作事件流
- docker log service

* XII. 管理进程
后台管理任务当作一次性进程运行
统一的管理？
- docker-compose
- adnin service
- docker exec -ti

* 扩展内容
- beyond 12-factor
- 工程实践过程中会遇到的问题
