DevOps is not so simple

2017.06.19

Bingo Huang

c.163yun.com

http://talks.bingohuang.com

* What is DevOps?

* Perfect confusion of ideas
- “A team that moderates between Dev and Ops”
- “Another buzzword for build and deployment automation”
- “Isn’t that just a new word for ‘agile’?”
- “It’s a mindset thing”
- “Of course the new version of our product is ‘DevOps’!”
- “You build it, you run it!”

* Dev+
- DevOps
- DevQA
- DevPM
- DevRE
- DevPO
- DevDev
- ……

* Let’s check the “DevOps bible”
#.image devops/the-phoenix-project-1.jpg
.image devops/the-phoenix-project-2.png

* Why DevOps is not simple?

* Top 5 Needs of an Admin

1.  Give me my peace and quiet!

2.  Don‘t make me think!

3.  Let me see that everything is fine!

4.  Show me the problem – now!

5.  Tell me what to do!

* Top 5 Needs of an Admin (translated)
1.  Give me my peace and quiet! 

  The application should just run smoothly

2.  Don‘t make me think! 

  Rollout, setup and operation of the application should be easy

3.  Let me see that everything is fine! 

  The application should show its state

4.  Show me the problem – now! 

  The application should provide concise error messages and enable easy root cause drilldown

5.  Tell me what to do! 

  The application should be documented properly – including error handling instructions

* DevOps will eventually rotate your IT organization by 90°

* Traditional IT organization
.image devops/traditional-it-organization.png _ 840

* DevOps IT organization
.image devops/devops-it-organization.png _ 840

* DevOps IT organization (optimized)
.image devops/devops-it-organization-2.png _ 840

* How to do DevOps?

* The role of DevOps
Quick repetition …

: 快速迭代

* Top 3 Challenges & 10 Design Principles
1.  Manageability

  I     Deployment
  II    Configuration
  III   Backup

2.  Resilience

  IV    Bulkheads
  V     Redundancy
  VI    Loose Coupling
  VII   Fallbacks
  VIII  Scalability

3.  Transparency

  IX    Monitoring
  X     Logging

: 1. 可管理（Manageability）
: 2. 可恢复（Resilience）
: 3. 可透明（Transparency）

* The 3 ways of DevOps

- Systems thinking
- Amplify feedback loops
- Culture of continual experimentation & learning

* 1. Systems thinking
.image devops/system-thinking.png 240 _

•  Maximize flow (minimize cycle times)

•  Optimize for global goals (holistic view)

•  Never pass defects downstream

•  Limit work in progress

•  Build systems and organizations that are safe to change

* 2. Amplify feedback loops
.image devops/amplify-feedback-loops.png 240 _

•  Facilitate constant flow of fast feedback from right-to-left

•  Create quality at source (provide knowledge where needed)

•  Create shared goals and shared pain for everyone involved

•  Implement fast automated test suites

•  Pervasively measure outcome (customer value), not output

* 3. Continual experimentation and learning
.image devops/continual-experimentation-and-learning.png 240 _

•  Create a culture that fosters two things

  •  Continual experimentation, taking risks and learning from success and failure

  •  Understanding that repetition and practice is the prerequisite to mastery

•  Allocate at least 20% of available cycles to non-business requirements

•  Constantly reinforce that improvements are encouraged & celebrated

* Sounds good, but how does it work?

* “Okay, let’s start with DevOps …”
.image devops/devops-1.png _ 840

* “But our IT department is too big. We need to organize differently.”
.image devops/devops-2.png _ 840

* “How can we enable the teams to become faster?”
.image devops/devops-3.png _ 840

* “How can we manage those teams?”
.image devops/devops-4.png _ 840

* “How can we control if the teams are on the right track?”
.image devops/devops-5.png _ 840

* “We need to rethink our overall governance model.”
.image devops/devops-6.png _ 840

* “How can we support autonomy on the architectural level?”
.image devops/devops-7.png _ 840

* “Can we help teams getting faster on the technological level?”
.image devops/devops-8.png _ 840

* “How can we ensure the required speed and flexibility at the infrastructure level?”
.image devops/devops-9.png _ 840

* “How can we guarantee high speed and high quality delivery?”
.image devops/devops-10.png _ 840

* “How can we guarantee high availability in production?”
.image devops/devops-11.png _ 840

* “How can we manage all those moving parts in production?”
.image devops/devops-12.png _ 840

* “How can we make sure the services of different teams work smoothly together?”
.image devops/devops-13.png _ 840

* “How can we make our efforts sustainable?”
.image devops/devops-14.png _ 840

* “How do we get enough input for improvement?”
.image devops/devops-15.png _ 840

* “How can we establish those quick feedback loops?”
.image devops/devops-16.png _ 840

* “And what does this all mean for the people involved in this?”
.image devops/devops-17.png _ 840
* “And what does this all mean for the people involved in this?”
.image devops/devops-18.png _ 840
* “And what does this all mean for the people involved in this?”
.image devops/devops-19.png _ 840

* Finally: DevOps drives the implementation of the new IT
.image devops/devops-20.png _ 840

* DevOps is not so simple and we need to rethink IT!

* Evolution of IT
.image devops/it-evolution-1.png _ 840
* We are here …
.image devops/it-evolution-2.png _ 840
* … but we still base most of our decisions on that
.image devops/it-evolution-3.png _ 840
* Business is very different today … than it was back then
.image devops/it-evolution-4.png _ 840

* Wrap-up
•  What is DevOps?

•  Why DevOps is not simple?

•  How to do DevOps?

•  DevOps is not so simple!

•  We need to rethink IT!
